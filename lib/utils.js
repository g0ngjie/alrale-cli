#!/usr/bin/env node
const inquirer=require("inquirer"),https=require("https"),http=require("http"),{spawn:spawn}=require("child_process"),Table=require("cli-table2"),os=require("os"),ora=require("ora"),download=require("download-git-repo"),path=require("path"),rimraf=require("rimraf"),fs=require("fs"),NotNegativeFloatReg=/^\d+(\.\d+)?$/,NotPositiveFloatReg=/^((-\d+(\.\d+)?)|(0+(\.0+)?))$/;exports.IsNumber=function(e){return NotNegativeFloatReg.test(e)||NotPositiveFloatReg.test(e)},exports.PrefixZero=function(e,t=2){return exports.IsNumber(e)?+e<10**(t-1)?(Array(t).join("0")+e).slice(-t):e+"":""},exports.ClearQuotes=function(e){return e.replace(/\"|\'/g,"")},exports.Inquirer=function(e=[]){return new Promise(t=>{inquirer.prompt(e).then(e=>{t({ok:!0,data:e})}).catch(e=>{e.isTtyError?t({ok:!1,msg:"不能在当前环境下呈现"}):t({ok:!1,msg:e+""})})})},exports.HttpsGet=function(e){return new Promise(t=>{https.get(e,function(e){200===e.statusCode?e.on("data",function(e){t({ok:!0,data:e})}):t({ok:!1,msg:e.statusMessage})}).on("error",function(e){t({ok:!1,msg:e.message})})})},exports.HttpGet=function(e){return new Promise(t=>{http.get(e,function(e){200===e.statusCode?e.on("data",function(e){t({ok:!0,data:e})}):t({ok:!1,msg:e.statusMessage})}).on("error",function(e){t({ok:!1,msg:e.message})})})},exports.GetTable=function(t,e){const r=new Table({head:e});for(let e=0;e<t.length;e++){var n=t[e];r.push(n)}return r.toString()},exports.GetPlatform=function(){var e={aix:"IBM AIX",android:"Android",darwin:"Apple",freebsd:"FreeBSD",linux:"Linux",openbsd:"OpenBSD",sunos:"SunOS",win32:"Windows"}[os.platform()]||"unknown";return{isWindow:"Windows"===e,isApple:"Apple"===e,isLinux:"Linux"===e,infos:e}},exports.Shell=function(n,o,s){return new Promise(t=>{const r=ora().start();r.color="cyan";const e=spawn(n,o,s);e.stdout.on("data",e=>t({ok:!0,data:e.toString()})),e.stdout.on("end",()=>r.stop()),e.stdout.on("error",e=>{r.stop(),t({ok:!1,msg:e.message})})})},exports.DownloadTemplate=function(e,n,t=!1){let r;return r=t?n:path.join(process.cwd(),n),rimraf.sync(r,{}),new Promise((t,r)=>{download(e,n,{clone:!0},e=>{e?r(e):t(n)})})};const CONFIG_FILE=path.join(__dirname,"..",".config.json");exports.GetConfig=async function(e){try{if(fs.existsSync(CONFIG_FILE)){var t=fs.readFileSync(CONFIG_FILE,{encoding:"utf8"});if(t){var r=JSON.parse(t)[e];return r?{ok:!0,data:r}:{ok:!1,msg:"空"}}return{ok:!0,msg:"未有配置"}}return fs.writeFileSync(CONFIG_FILE,"",{encoding:"utf8"}),{ok:!1,msg:"未有配置文件"}}catch(e){return{ok:!1,msg:"异常"}}},exports.SetConfig=async function(e={}){try{fs.existsSync(CONFIG_FILE)||fs.writeFileSync(CONFIG_FILE,"",{encoding:"utf8"});var t=fs.readFileSync(CONFIG_FILE,{encoding:"utf8"});if(t){var r={...JSON.parse(t),...e};return fs.writeFileSync(CONFIG_FILE,JSON.stringify(r),{encoding:"utf8"}),{ok:!0}}return fs.writeFileSync(CONFIG_FILE,JSON.stringify(e),{encoding:"utf8"}),{ok:!0}}catch(e){return{ok:!1,msg:"异常"}}};