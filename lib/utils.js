#!/usr/bin/env node
const inquirer=require("inquirer"),https=require("https"),http=require("http"),{spawn:spawn}=require("child_process"),Table=require("cli-table2"),os=require("os"),ora=require("ora"),download=require("download-git-repo"),path=require("path"),rimraf=require("rimraf"),fs=require("fs"),NotNegativeFloatReg=/^\d+(\.\d+)?$/,NotPositiveFloatReg=/^((-\d+(\.\d+)?)|(0+(\.0+)?))$/;exports.IsNumber=function(t){return NotNegativeFloatReg.test(t)||NotPositiveFloatReg.test(t)},exports.PrefixZero=function(t,e=2){return exports.IsNumber(t)?+t<10**(e-1)?(Array(e).join("0")+t).slice(-e):t+"":""},exports.ClearQuotes=function(t){return t.replace(/\"|\'/g,"")},exports.Inquirer=function(t=[]){return new Promise(e=>{inquirer.prompt(t).then(t=>{e({ok:!0,data:t})}).catch(t=>{t.isTtyError?e({ok:!1,msg:"不能在当前环境下呈现"}):e({ok:!1,msg:t+""})})})},exports.HttpsGet=function(t){return new Promise(e=>{https.get(t,function(t){200===t.statusCode?t.on("data",function(t){e({ok:!0,data:t})}):e({ok:!1,msg:t.statusMessage})}).on("error",function(t){e({ok:!1,msg:t.message})})})},exports.HttpGet=function(t){return new Promise(e=>{http.get(t,function(t){200===t.statusCode?t.on("data",function(t){e({ok:!0,data:t})}):e({ok:!1,msg:t.statusMessage})}).on("error",function(t){e({ok:!1,msg:t.message})})})},exports.GetTable=function(e,t){const r=new Table({head:t});for(let t=0;t<e.length;t++){var n=e[t];r.push(n)}return r.toString()},exports.GetPlatform=function(){var t={aix:"IBM AIX",android:"Android",darwin:"Apple",freebsd:"FreeBSD",linux:"Linux",openbsd:"OpenBSD",sunos:"SunOS",win32:"Windows"}[os.platform()]||"unknown";return{isWindow:"Windows"===t,isApple:"Apple"===t,isLinux:"Linux"===t,infos:t}},exports.Shell=function(n,o,s){return new Promise(e=>{const r=ora().start();r.color="cyan";const t=spawn(n,o,s);t.stdout.on("data",t=>e({ok:!0,data:t.toString()})),t.stdout.on("end",()=>r.stop()),t.stdout.on("error",t=>{r.stop(),e({ok:!1,msg:t.message})})})},exports.DownloadTemplate=function(t,n,e=!1){let r;return r=e?n:path.join(process.cwd(),n),rimraf.sync(r,{}),new Promise((e,r)=>{download(t,n,{clone:!0},t=>{t?r(t):e(n)})})};const CONFIG_FILE=path.join(__dirname,"..",".config.json");exports.GetConfig=async function(t){try{if(fs.existsSync(CONFIG_FILE)){var e=fs.readFileSync(CONFIG_FILE,{encoding:"utf8"});if(e){e=JSON.parse(e)[t];return e?{ok:!0,data:e,msg:"获取用户配置"}:{ok:!1,msg:"空"}}return{ok:!1,msg:"未有配置"}}return fs.writeFileSync(CONFIG_FILE,"",{encoding:"utf8"}),{ok:!1,msg:"未有配置文件"}}catch(t){return{ok:!1,msg:"异常"}}},exports.SetConfig=async function(t={}){try{fs.existsSync(CONFIG_FILE)||fs.writeFileSync(CONFIG_FILE,"",{encoding:"utf8"});var e=fs.readFileSync(CONFIG_FILE,{encoding:"utf8"});if(e){e={...JSON.parse(e),...t};return fs.writeFileSync(CONFIG_FILE,JSON.stringify(e,"","\t"),{encoding:"utf8"}),{ok:!0}}return fs.writeFileSync(CONFIG_FILE,JSON.stringify(t,"","\t"),{encoding:"utf8"}),{ok:!0}}catch(t){return{ok:!1,msg:"异常"}}},exports.ClearConfig=async function(){try{return fs.existsSync(CONFIG_FILE)?(fs.writeFileSync(CONFIG_FILE,"",{encoding:"utf8"}),{ok:!0,msg:"已被清空"}):{ok:!0,msg:"本地文件不存在"}}catch(t){return{ok:!1,msg:t}}};