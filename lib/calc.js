#!/usr/bin/env node
const util=require("./utils"),print=require("./print");function convert(r){return parseFloat(r)}function add(r,e){return convert(r)+convert(e)}function subtract(r,e){return convert(r)-convert(e)}function mutiply(r,e){return convert(r)*convert(e)}function divide(r,e){return convert(r)/convert(e)}function square(r,e){return convert(r)**convert(e)}exports.Calc=async function(r,e,t){var n=r?[{type:"rawlist",name:"operator",choices:["+","-","*","/","**"]}]:[{type:"input",prefix:"<number>|q:quit|s:select|c:clear\n",name:"target"}],{ok:i,msg:r,data:n}=await util.Inquirer(n);if(i){var{operator:n,target:a}=n;if(n)t=n;else if(a){if("q"===a)print.Message("quit!"),process.exit(0);else{if("c"===a)return print.Message("重新计算"),exports.Calc(!0);if("s"===a)return exports.Calc(!0,e)}if(!e)return e=+a,exports.Calc(!1,e,t);if(util.IsNumber(a)){if(e||0===e)switch(t){case"+":e=add(e,+a);break;case"-":e=subtract(e,+a);break;case"*":e=mutiply(e,+a);break;case"/":e=divide(e,+a);break;case"**":e=square(+e,+a)}}else print.Error("类型不正确")}}else print.Error(r);!e&&0!==e||print.Message(e),exports.Calc(!1,e,t)};