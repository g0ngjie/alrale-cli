#!/usr/bin/env node
const util=require("./utils"),print=require("./print");function convert(e){return parseFloat(e)}function add(e,r){return convert(e)+convert(r)}function subtract(e,r){return convert(e)-convert(r)}function mutiply(e,r){return convert(e)*convert(r)}function divide(e,r){return convert(e)/convert(r)}function square(e,r){return convert(e)**convert(r)}exports.Calc=async function(e,r,t){var n=e?[{type:"rawlist",name:"operator",choices:[{name:"加",value:"+"},{name:"减",value:"-"},{name:"乘",value:"*"},{name:"除",value:"/"},{name:"平方",value:"**"}]}]:[{type:"input",prefix:"<number>|q:quit|s:select|c:clear\n",name:"target"}],{ok:a,msg:e,data:n}=await util.Inquirer(n);if(a){var{operator:n,target:i}=n;if(n)t=n;else if(i){if("q"===i)print.Message("quit!"),process.exit(0);else{if("c"===i)return print.Message("重新计算"),exports.Calc(!0);if("s"===i)return exports.Calc(!0,r)}if(!r)return r=+i,exports.Calc(!1,r,t);if(util.IsNumber(i)){if(r||0===r)switch(t){case"+":r=add(r,+i);break;case"-":r=subtract(r,+i);break;case"*":r=mutiply(r,+i);break;case"/":r=divide(r,+i);break;case"**":r=square(+r,+i)}}else print.Error("类型不正确")}}else print.Error(e);!r&&0!==r||print.Message(r),exports.Calc(!1,r,t)};